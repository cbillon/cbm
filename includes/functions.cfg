#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELOW=$(tput setaf 3)
BLUE=$(tput setaf 14)
NC=$(tput sgr 0)

function info () { echo -e "${BLUE}${indent:-} ${@} ${FUNCNAME[1]}:${BASH_LINENO[0]}${NC}"; }
function warn () { echo -e "${YELOW}${indent:-} ${@} ${FUNCNAME[1]}:${BASH_LINENO[0]}${NC}"; }
function error () { echo -e "${RED}${indent:-} ${@} ${FUNCNAME[1]}:${BASH_LINENO[0]}${NC}"; }
function success () { echo -e "${GREEN}${indent:-} ${@} ${FUNCNAME[1]}:${BASH_LINENO[0]}${NC}"; }

function wait_keyboard () {
  read -n 1 -s -r -p "${1:-'Press any key to continue'}"
}

function setx_output () {
  # dump set -x data to a file
  # turns on with a filename as $1
  # turns off with no params
  if [[ $1 ]]; then
    exec {BASH_XTRACEFD}>>"$1"
    set -x
  else
    set +x
    unset -v BASH_XTRACEFD
  fi
}

function Start () {
  local lvl
  lvl="${#FUNCNAME[@]}"
  indent=''
  for ((i=1; i<=$((lvl-1)); i++));
  do
    indent+=' '
  done
  echo -e "$indent" "${FUNCNAME[1]}" "$*" Start "${BASH_LINENO[0]}" \("${FUNCNAME[2]}":"${BASH_LINENO[1]}"\)

}

function End () {
  local lvl
  lvl="${#FUNCNAME[@]}"
  indent=''

  for ((i=1; i<=$((lvl-1)); i++));
  do
    indent+=' '
  done
  echo -e "$indent" "${FUNCNAME[1]}" "End " "${BASH_LINENO[0]}" \("${FUNCNAME[2]}":"${BASH_LINENO[1]}"\)

}

function get_project_conf () {
  Start "$*"

  PROJECT_BRANCH=$(yq .project.branch "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  MOODLE_VERSION=$(yq .moodle.version "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  is_version_valid "$MOODLE_VERSION" || { error Invalid Moodle version: "$MOODLE_VERSION"; exit 1; }
  if [[ "$MOODLE_VERSION" =~ ^[4-5]\.[0-5]\+?$|^[4-5]\.[0-5]\.[0-4]\+?$ ]];
  then
    MOODLE_MAJOR_VERSION="${MOODLE_VERSION:0:3}"
  # la branche de la version MOODLE majeure est obtenue par moodle-version.yml
    MOODLE_BRANCH=$(yq '."'${MOODLE_MAJOR_VERSION}'".branch' "$RACINE"/moodle-version.yml)
    if [[ "$MOODLE_BRANCH" != null  ]]; then
    [ "$DEBUG" = true ] && info "Moodle: $MOODLE_MAJOR_VERSION Branch: $MOODLE_BRANCH"
    else
    error "Version ${MOODLE_MAJOR_VERSION} unknown"
    exit 1
    fi
  fi
  End
}

function get_pluglist () {
  Start "$*"
  error=0
  local diff filedate
  if [ -f "$RACINE"/pluglist.json ]; then
    now=$(date +'%Y-%m-%d')
    filedate=$(stat "$RACINE"/pluglist.json | grep -E '^.*Modify:.*$' | cut -d ' ' -f 2)
    diff=$((($(date -d "$now" +%s) - $(date -d "$filedate" +%s))/86400))
    [ "$DEBUG" = true ] && info Diff days: $diff
    [[ "$diff" -lt "$DIFF_DAYS" ]] || wget download.moodle.org/api/1.3/pluglist.php -O "$RACINE"/pluglist.json
  else
    wget download.moodle.org/api/1.3/pluglist.php -O "$RACINE"/pluglist.json
  fi

  End
  return "$error"
}

function create_file () {
  error=0
  if [ ! -f "$1" ];then
    touch "$1"
  fi
}

function create_dir () {
  error=0
  if [ ! -d "$1" ];then
    mkdir -p "$1"
  fi
}

function menu () {
  whiptail "$@" 3>&1 1>&2 2>&3 3>&-
  return "$?"
}

function is_project_branch () {
  cd "$MOODLE_SRC"
  [[ $(git branch | grep "$PROJECT_BRANCH") ]] && return 0 || return 1
}

function is_version_valid () {
    [[ "$1" =~ ^[4-5]\.[0-5]\+?$|^[4-5]\.[0-5]\.[0-4]\+?$|^[a-f0-9]{7,40} ]] && return 0 || return 1
}

function is_conf_file () {
  [ -d "$PROJECTS_PATH"/"$PROJECT" ] || return 1
  [ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ] || { error Project "$PROJECT" not exists; return 1; }
  yq "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml >/dev/null  || { error invalid config file; return 1; }
}

function is_plugin_in_cache () {
  [ -d "$DEPOT_MODULES"/"$1" ] && return 0 || return 1
}

function is_plugin_installed () {

  PLUGIN="$1"
  is_plugin_in_cache "$PLUGIN" && info "$PLUGIN" in cache || { error "$PLUGIN" not in cache; exit 1; }
  get_plugin_dir "$PLUGIN"
  cd "$MOODLE_SRC"
  git checkout "$PROJECT_BRANCH" --quiet

  [ -d "MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME" ] && return 0 || return 1

}

function verif_pre_requis () {
  Start "$*"
  local error
  error=0
  git --version 1>/dev/null || { error git not installed see README.md; error=1; }
  jq --version 1>/dev/null || { error jq not installed see README.md; error=1; }
  yq --version 1>/dev/null || { error yq not installed see README.md; error=1; }
  [ "$error" -eq 0 ] && success Pre requis satisfied || error Pre requis not satisfied
  End
  return "$error"
}
function create_env () {

  # create repository
  if [ ! -d "$PROJECTS_PATH" ]; then
    mkdir "$PROJECTS_PATH"
    cd "$PROJECTS_PATH"
    git init -b main
    success Repository "$PROJECTS_PATH" created
  fi
  create_dir "$DEPOT_MODULES"

}

function create_commit () {

  cd "$PROJECTS_PATH"
  if [[ $(git status --porcelain) ]]; then
    if [ -z "$1" ]; then
      error commit message undefined
      exit
    else
      git add .
      git commit -m "$1"
    fi
  fi
}

function get_moodle_desired_state () {
  Start "$*"
  # get project requested state
  # PARAM IN  : $1 PROJECT
  #       OUT :
  #             MOODLE_VERSION (from <project>.yml)
  #             MOODLE_MAJOR_VERSION
  #             MOODLE_BRANCH
  #             MOODLE_DESIRED_STATE (as commit if MOODLE_SRC exists)
  error=0

  [ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ]

  yq . "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml >/dev/null || {
     error Syntax error : "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
     exit 1
   }
  get_project_conf

  MOODLE_DESIRED_STATE=''

  if [[ -d "$MOODLE_SRC" ]];
  then
    cd "$MOODLE_SRC"
    if [[ "$MOODLE_VERSION" =~ ^[4-5]\.[0-5]$ ]]
    then
    #for example 4.5
      [ "$DEBUG" = true ] && info "Latest available release $MOODLE_VERSION"
      echo "latest available release $MOODLE_VERSION"
      git checkout "$MOODLE_BRANCH" --quiet
      tags=$(git tag -l v"$MOODLE_VERSION"*)
      [ -z "$tags" ] && error Tags are missing!  && exit 1
      info "$tags"
      MOODLE_DESIRED_STATE=v${tags##*v}

    elif [[ "$MOODLE_VERSION" =~ ^[4-5]\.[0-5]\+$ ]]
    then
      #for example 4.5+
      git checkout "$MOODLE_BRANCH" --quiet
      MOODLE_DESIRED_STATE="$MOODLE_BRANCH"
      [ "$DEBUG" = true ] && info Latest available release "$MOODLE_VERSION" with fixes: "MOODLE_DESIRED_STATE"
    elif [[ "$MOODLE_VERSION" =~ ^[4-5]\.[0-5]\.[0-4]$ ]]
    then
      #for example 4.5.1
      git checkout "$MOODLE_BRANCH" --quiet
      [[ $(git tag -l "v${MOODLE_VERSION}") ]] || (error "Release $MOODLE_VERSION not exists" && exit 1)
      MOODLE_DESIRED_STATE=v$MOODLE_VERSION
      [ "$DEBUG" = true ] && info Specific release in "$MOODLE_VERSION" : "MOODLE_DESIRED_STATE"
    elif [[ "$MOODLE_VERSION" =~ ^[4-5]\.[0-5]\.[0-4]?\+$ ]]
    then
      error Specific release with fixes in "$MOODLE_VERSION" not yet supported...
      error=1
    elif [[ "$MOODLE_VERSION" =~ ^[a-f0-9]{7,40}$ ]]
    then
      [ "$DEBUG" = true ] && info "force commit $MOODLE_VERSION"
      local branch
      branch=$(git branch --contains "$MOODLE_VERSION")
      if [[ "$branch" =~ ^.*(MOODLE_[0-9]{2,3}_STABLE).*$ ]];
      then
        [ "$DEBUG" = true ] && info Commit "$MOODLE_VERSION" branch found: "${BASH_REMATCH[1]}"
         MOODLE_BRANCH="${BASH_REMATCH[1]}"
         MOODLE_DESIRED_STATE="$MOODLE_VERSION"
      else
        error no branch MOODLE_XXX_STABLE found
        error=1
      fi
    else
      error Moodle version nothing found
      error=1
    fi
  else
  # current when no MOODLE repo
    warn Moodle source repository not present
  fi

  if [[ -d "$MOODLE_SRC" ]];
  then
    info git checkout "$MOODLE_DESIRED_STATE"
    git checkout "$MOODLE_DESIRED_STATE" --quiet
    #local current state
    #current_state=$(git rev-parse --short HEAD)
    #CURRENT_STATE="${current_state:0:7}"
    CURRENT_STATE=$(git rev-parse --short HEAD)
  fi

  [ "$DEBUG" = true ] && info MOODLE_VERSION: "$MOODLE_VERSION"
  [ "$DEBUG" = true ] && info MOODLE_MAJOR_VERSION: "${MOODLE_MAJOR_VERSION:-}"
  [ "$DEBUG" = true ] && info MOODLE_BRANCH: "$MOODLE_BRANCH"
  [ "$DEBUG" = true ] && info MOODLE_DESIRED_STATE: "$MOODLE_DESIRED_STATE"
  [ "$DEBUG" = true ] && info CURRENT_STATE: "${CURRENT_STATE:-}"

  End
  return "$error"
}

function repo_need_upgrade () {
  # 1 repository
  # 2 branch
  Start "$*"
  local error repo branch local remote base
  error=0
  repo="$1"
  branch="$2"
  [ "$DEBUG" = true ]&& info repo: "$repo"
  [ "$DEBUG" = true ]&& info branch: "$branch"
  cd "$repo"
  git checkout "$branch" --quiet

  git remote | grep upstream >/dev/null || error no remote upstring

  local=$(git rev-parse @)
  remote=$(git rev-parse @{u})
  base=$(git merge-base @ @{u})

  [ "$DEBUG" = true ]&& info local:  " ${local:0:7}"
  [ "$DEBUG" = true ]&& info remote: "${remote:0:7}"
  [ "$DEBUG" = true ]&& info base:   "  ${base:0:7}"

  if [ "$local" = "$remote" ]; then
    success "$repo branche $branch up-to-date with branch remote"
    error=0
  elif [ "$local" = "$base" ]; then
    warn "$repo branche $branch need to pull from remote"
    error=1
  elif [ "$remote" == "$base" ]; then
    warn "$repo branche $branch need to push to remote"
    error=2
  else
    error "$repo branche $branch diverged with remote"
    error=3
  fi

  End
  return "$error"

}

function config_check () {

# 1 PROJECT

  Start "$*"
  [ "$DEBUG" = true ] && info Project: "$PROJECT"
  error=0
  # check validity .yml
  is_conf_file
  # check MOODLE_VERSION
  get_project_conf
  # is up to date
  repo_need_upgrade "$MOODLE_SRC" "$MOODLE_BRANCH" && success "$MOODLE_BRANCH" already up to date || error "error $?" see previous message

  get_plugins
  for PLUGIN in $PLUGINS; do
    info "Check plugin: $PLUGIN"
    # check if plugin exists in cache
    if [[ -d "$DEPOT_MODULES"/"$PLUGIN" ]]; then
      cd "$DEPOT_MODULES"/"$PLUGIN"
      git remote | grep upstream >/dev/null || error "$PLUGIN" no upstream remote
      get_plugin_params "$PLUGIN"
      #PLUGIN_BRANCH=$(yq .plugins."$PLUGIN".branch  "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
      if [[ "$PLUGIN_BRANCH" != null  ]]; then
        git checkout "$PLUGIN_BRANCH" --quiet
      else
        error "$PLUGIN" missing branch in config file corr the problem
        search_plugin_state "$PLUGIN"
        error=1
        if [[ -n "$PLUGIN_BRANCH" ]]; then
          pathenv=".plugins.$PLUGIN.branch" branche="$PLUGIN_BRANCH" yq -i 'eval(strenv(pathenv)) = strenv(branche)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
          error=0
          success  plugin: "$PLUGIN" branch "$PLUGIN_BRANCH" updated in config file
        fi
        if [[ -n "$PLUGIN_VERSION" ]]; then
          pathenv=".plugins.$PLUGIN.version" version="$PLUGIN_VERSION" yq -i 'eval(strenv(pathenv)) = strenv(version)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
          success  plugin: "$PLUGIN" branch "$PLUGIN_VERSION" updated in config file
        fi
      fi
    else
      [ "$DEBUG" = true ] && info "$PLUGIN" missing
      find_plugin_source "$PLUGIN" || { error source plugin "$PLUGIN" not found; continue; }
      pathenv=".plugins.$PLUGIN.source" source="$SOURCE" yq -i 'eval(strenv(pathenv)) = strenv(source)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      clone_plugin "$PLUGIN" "$SOURCE"
      search_plugin_state "$PLUGIN"
      pathenv=".plugins.$PLUGIN.branch" branche="$PLUGIN_BRANCH" yq -i 'eval(strenv(pathenv)) = strenv(branche)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      success  plugin: "$PLUGIN" branch: "$PLUGIN_BRANCH" added in local cache
    fi
    [ "$DEBUG" = true ] && info "$PLUGIN" in local cache and state in config file updated

    # is plugin up to date
    [[ "$error" -eq 0 ]] && repo_need_upgrade "$DEPOT_MODULES"/"$PLUGIN" "$PLUGIN_BRANCH" && success "$PLUGIN_BRANCH" already up to date || { error="$?"; error "error $error" see previous message; }
  done

  [ "$error" -eq 0 ] && success Configuration file "$PROJECT" successful || error Please correct configuration file and retry

  End
  return
}

function is_plugin_branch (){
# 1 PLUGIN
# 2 branch
# check if exists upstream/"$2"
  if [[ -n $(git rev-parse --verify upstream/"$2" 2>/dev/null) ]]; then
    git checkout "$2" --quiet || git branch "$2" upstream/"$2"
    info plugin branch "$2" selected for "$1"
    return 0
  else
    return 1
  fi
}

function search_plugin_state () {
  Start "$*"
  # IN:  $PROJECT
  #      $PLUGIN
  # OUT: $PLUGIN_BRANCH
  #      $PLUGIN_VERSION
  # PLUGIN must be present in cache
  local search
  error=0

  [ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ] || exit 1
  PLUGIN="$1"
  get_plugin_params "$PLUGIN"
  cd "$DEPOT_MODULES"/"$PLUGIN" || exit 1
  # if already determined return
  [[ "$PLUGIN_BRANCH" != null ]] && info PLUGIN_BRANCH "$PLUGIN_BRANCH" from config && return 0
  [[ "$PLUGIN_VERSION" != null ]] && info PLUGIN_VERSION "$PLUGIN_VERSION" from config && return 0
  [[ "$LOCALDEV" != null ]] && info LOCALDEV "$LOCALDEV" from config && return 0

  PLUGIN_BRANCH=''
  PLUGIN_VERSION=''

  if [[ $(git branch -r | grep -E "^  upstream\/$MOODLE_BRANCH$") ]]; then
    git checkout "$MOODLE_BRANCH" --quiet || git checkout -b "$MOODLE_BRANCH" upstream/"$MOODLE_BRANCH" --quiet
    PLUGIN_BRANCH="$MOODLE_BRANCH"
    info "Bingo Moodle branch $MOODLE_BRANCH match !"
    return 0
  fi

  # search if branch remote MOODLE_XXX_STABLE

  if [[ $(git branch -r | sort -rn | grep -E "^  upstream\/MOODLE_.*" | head -n 1) ]]; then
    local branch
    branch=$(git branch -r | sort -rn | grep -E "^  upstream\/MOODLE_.*" | head -n 1)
    git checkout "${branch:11}" --quiet || git checkout -b  "${branch:11}" "$branch"
    PLUGIN_BRANCH="${branch:11}"
    info "Found remote branch ${branch:11}"
    return 0
  fi
    # search if exists tag supporting MOODLE_XXX_STABLE

  [[ "$MOODLE_BRANCH" =~ MOODLE_(.*)_STABLE ]] && search="${BASH_REMATCH[1]}" || error Moodle Version not found
  for tag in $(git tag -l | sort -r ); do
    git checkout "$tag" --quiet
    [[ $(cat version.php) =~ .*supported.*"$search" ]] && PLUGIN_VERSION="$tag" && break
  done
  if [[ -n "$PLUGIN_VERSION" ]]; then
    info MOODLE_"$search"_STABLE tag found
    PLUGIN_VERSION="$tag"
    PLUGIN_BRANCH=$(echo $(git branch --contains $(git rev-parse --short "$tag")) | rev | cut -d' ' -f1 | rev)
    info Found "$tag" version comptible with "$MOODLE_BRANCH"
    return 0
  fi
  is_plugin_branch "$PLUGIN" master && PLUGIN_BRANCH=master && return 0
  is_plugin_branch "$PLUGIN" main && PLUGIN_BRANCH=main && return 0

  error no branch found for "$PLUGIN"
  error=1

  End
return "$error"

}

function create_project () {
  Start "$*"
  # 1 project
  # 2 moodle version
  [ -d "$PROJECTS_PATH"/"$1" ] && error Project "$1" already exists && exit 1
  #create_dirs
  create_dir "$PROJECTS_PATH"/"$1"
  create_dir "$PROJECTS_PATH"/"$1"/env
  create_file "$PROJECTS_PATH"/"$1"/"$1".yml
  create_dir "$PROJECTS_PATH"/"$1"/env/dev
  create_file "$PROJECTS_PATH"/"$1"/env/dev/config.php

  {
    echo "# Configuration de $1";
    echo "# Created by $USER " "$(date)";
    echo "";
    echo "project:";
    echo "  name: $1";
    # by default PROJECT BRANCH = PROJECT
    echo "  branch: $1";
    echo "";
    echo "moodle:";
    echo "  version: $2";
    echo "";
    echo "plugins:";
  } >>"$PROJECTS_PATH"/"$1"/"$1".yml

  PROJECT="$1"
  get_project_conf
  #create_commit "Project $PROJECT created"

  # Initialisation signal erreur
  error=0

  #[ "$DEBUG" = true ] && info MOODLE_BRANCH: "$MOODLE_BRANCH"
  if [ -d "$MOODLE_SRC" ]; then
    info "$MOODLE_SRC" already exists
    cd "$MOODLE_SRC"
    git fetch upstream --tags --quiet
    if [[ ! $(git branch --list | grep "^.*$MOODLE_BRANCH") ]]; then
      info "Branch $MOODLE_BRANCH not exists create branch"
      git branch "$MOODLE_BRANCH" remotes/upstream/"$MOODLE_BRANCH"
      # git remote set-branches upstream "$MOODLE_BRANCH" || check_command "error git remote set-branches upstream $MOODLE_BRANCH"
      #git fetch upstream "$MOODLE_BRANCH" --tags --quiet || check_command "error git fetch upstream $MOODLE_BRANCH --tags --quiet"
    else
      update_moodle "$PROJECT"
    fi
  else
    info "$MOODLE_SRC" does not exists
    if [[ "$DEPTH" -gt 0 ]]; then
      git clone --branch "$MOODLE_BRANCH" --depth "$DEPTH" "$MOODLE_DEPOT"  "$MOODLE_SRC"
    else
      git clone --branch "$MOODLE_BRANCH" "$MOODLE_DEPOT"  "$MOODLE_SRC"
    fi
    cd "$MOODLE_SRC"
    git remote add upstream "$MOODLE_HQ"
  fi
  get_moodle_desired_state
  # Create project branch
  cd "$MOODLE_SRC"  
  git branch "$PROJECT_BRANCH" "$MOODLE_DESIRED_STATE"
  info Branch "$PROJECT_BRANCH" from "$MOODLE_DESIRED_STATE" created

  git checkout "$PROJECT_BRANCH" --quiet

  End
  return "$error"

}

function update_moodle () {
  Start "$*"
  local error
  error=0
  get_moodle_desired_state

  repo_need_upgrade "$MOODLE_SRC" "$MOODLE_BRANCH" || error="$?"
  case "$error" in
    0)
      success "$MOODLE_SRC" "$MOODLE_BRANCH" up to date
      ;;
    1)
      info Moodle branch "$MOODLE_BRANCH" need update
      git checkout "$MOODLE_BRANCH" --quiet
      git merge --ff-only  upstream/"$MOODLE_BRANCH" --quiet
      info Branch "$MOODLE_BRANCH" updated from upstream
      get_moodle_desired_state "$PROJECT"
      update_project
      ;;
    *)
      error "$error" see previous message
      ;;
  esac

  End
  return "$error"

}

function update_project () {
Start "$*"
error=0
# project_origin est le commit de départ de la branche projet
# etat de Moodle change si :
#  Moodle a changé et MOODLE VERSION a changé
#  Moodle Version a été modifié dans le fichier de configuration
#get_project_conf
get_moodle_desired_state
cd "$MOODLE_SRC"

if [ $(git merge-base "$MOODLE_BRANCH" "$PROJECT_BRANCH") = $(git rev-parse "$MOODLE_BRANCH") ];
then
  success project already up to date
else
# update project
  git checkout "$PROJECT_BRANCH" --quiet
  git merge "$MOODLE_BRANCH"
  success "$PROJECT_BRANCH" merged after Moodle update
fi

End
return "$error"
}

function list_plugins_cache () {
  Start "$*"
  error=0
  i=0
  list=''
  for d in $(ls -l "$DEPOT_MODULES" | awk '{print $9}' | sort);
  do
    i=$((i+1))
    list="$list $d $i OFF"
  done

  menu --title "Plugins cache" --checklist "Plugin's List(cache)" 25 78 16 $list

  sortie=0
  End
}

function get_plugin_dir () {
  # IN: $PLUGIN  type_component name
  # OUT: $DIR
  Start "$*"
  error=0
  # le fichier components.json permet de determiner le repertoire de destination a partir du type de plugin
  # pour convertir au format yaml : yq -oy components.json > components.yml
  #https://blog.kiprosh.com/regular-expressions-greedy-vs-non-greedy/ type_stype_name
  # doesn t works wit bash !
  local ss
  if [[ "$1" =~ ^[a-z].*?_.*$ ]];
  then
    PLUGIN="$1"
    ss=${1#*-}
    COMPONENT_NAME=${1#*_}
    TYPE=${ss%%_*}
    DIR=$(jq -r .plugintypes."$TYPE" "$RACINE"/types.json)
    [ "$DIR" == null ] && error type: "$TYPE" invalide && error=1
  else
    error=1
    error Incorrect plugin syntax "$1"
  fi
  End
  return "$error"

}

function add_plugin_cache () {

  Start "$*"
  error=0
  valid_plugin=1
  while [ "$valid_plugin" -ne 0 ];
  do
    parm=$(menu --inputbox "New plugin (type_name) ?" 8 39 "" --title "Add plugin")
    # en parametre le plugin recherché sous la forme <type>_<name>
    if [[ "$?" -eq 0 ]]; then
      [ -z "$parm" ] && error "$parm" Parametre plugin missing && valid_plugin=1
      get_plugin_dir "$parm" && { PLUGIN="$parm"; valid_plugin=0; } || valid_plugin=1
      [ "$DEBUG" = true ] && info plugin: "$PLUGIN" "$TYPE" "$COMPONENT_NAME"
    else
      return 1
    fi
  done

  if [ -d "$DEPOT_MODULES"/"$PLUGIN" ]; then
    warn "$PLUGIN" already exists
  else
    # Recherche dans le fichier de référence des plugins
    # Add plugin
    if find_plugin_source "$PLUGIN"; then
      info Plugin Source : "$SOURCE"
      clone_plugin "$PLUGIN" "$SOURCE"
      success "$PLUGIN locally loaded in cache"
    else
      error plugin "$PLUGIN" not found in official plugins directory
      error=1
    fi
  fi

End
return "$error"
}

function clone_plugin () {
  # 1 PLUGIN
  # 2 url source
  Start "$*"
  if [ ! -d "$DEPOT_MODULES"/"$PLUGIN" ];
  then
    cd "$DEPOT_MODULES"
    git clone "$2" "$1" --quiet
    cd "$DEPOT_MODULES"/"$1"
    git remote rename origin upstream
  fi
  End

}

function find_plugin_source () {
  Start "$*"
  local error var
  error=0
  SOURCE=$(yq .plugins."$PLUGIN".source "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  [ "$DEBUG" = true ] && info Project: "$PROJECT" Plugin: "$PLUGIN" "$SOURCE"
  if [ "$SOURCE" = null ];
  then
    jq -r --arg plugin  "$PLUGIN" '.plugins|map(select(.component == $plugin)) | .[]' "$RACINE"/pluglist.json > "$RACINE"/tmp.json
    var=$(jq '.id' "$RACINE"/tmp.json)
    [ "$DEBUG" = true ] && info id: "$var"
    if [ "$var" == '' ]; then
      error "$PLUGIN" not found in plugin directory nor source
      error=1
    else
    # NAME=$(jq -r '.name' "$RACINE"/tmp.json)  # description
      SOURCE=$(jq -r '.source' "$RACINE"/tmp.json)
    fi
  fi
   [ "$DEBUG" = true ] && info PLUGIN: "$PLUGIN" SOURCE "$SOURCE"
  End
  return "$error"
}

function add_plugin_project () {
  Start "$*"
  # Retrieve plugins already in configuration file
  get_plugins
  cd "$DEPOT_MODULES"
  local i error must_update_codebase list
  i=0
  must_update_codebase=0
  error=0

  list=''
  for d in $(ls -l "$DEPOT_MODULES" | awk '{print $9}'); do
    # save plugins not in project configuration file
    [[ "$PLUGINS" =~ .*"$d".* ]] && continue
    i=$((i+1))
    list="$list $d $i OFF"
  done

  PLUGINS=$(menu --title "Plugins cache" --checklist "Plugin's List" 25 78 16 $list)

  for PLUGIN in $PLUGINS; do
    PLUGIN="${PLUGIN//'"'}"
    # "'
    if [[ ! $(cat "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml) =~ ^.*"$PLUGIN".*$ ]];
    then
      info  Plugin: "$PLUGIN"
      cd "$DEPOT_MODULES"/"$PLUGIN"
      SOURCE=$(git config remote.upstream.url)
      echo "" >> "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      echo "  $PLUGIN:" >> "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      #echo "    name: $NAME" >> "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      echo "    source: $SOURCE" >> "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      search_plugin_state "$PLUGIN"

      [[ -n "$PLUGIN_BRANCH" ]] && echo "    branch: $PLUGIN_BRANCH" >> "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
      [[ -n "$PLUGIN_VERSION" ]] && echo "    version: $PLUGIN_VERSION" >> "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml

      #create_commit "$PROJECT add plugin $PLUGIN"

      must_update_codebase=1
    fi
  done
  [ -n "$must_update_codebase" ] && [ "$must_update_codebase" -eq 1 ] && edit_plugins "$PROJECT"
  End
  return "$error"
}

function edit_plugins () {
info
  Start "$*"
  error=0

  get_moodle_desired_state
  local date_before date_after
  date_before=$(date -r "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  get_plugins
  plugins_before="$PLUGINS"

  ret=1
  while [ $ret -ne 0 ];
  do
  # exec {STDOUTBACK}>&1
  # exec {STDERRBACK}>&2
  # exec 1>>/dev/pts/0
  # exec 2>>/dev/pts/0
  nano "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml
  ret="$?"
  # exec 1>&$STDOUTBACK
  # exec 2>&$STDERRBACK

  config_check && ret=0 || wait_keyboard 'Error in config file.Press any key and correct'
  done

  date_after=$(date -r "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  if [ "$date_after" != "$date_before" ]; then
     [ "$DEBUG" = true ] && echo "il y a eu des maj..."
    # check validity .yml
    yq "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml >/dev/null || exit 1
    get_plugins
    plugins_after="$PLUGINS"

    # on ne récupere que les plugins uniques donc uniquement ceux supprimés et non aussi ceux ajoutés !
    plugins_suppress=$(echo "$plugins_before" "$plugins_after" "$plugins_after" | tr ' ' '\n' | sort | uniq -u)

    if [ -n "$plugins_suppress" ]; then
      for key in "${!plugins_suppress[@]}"; do
        # skip first entry -[ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ]
        [[ ${plugins_suppress[$key]} == '-' ]] && continue
        echo "A supprimmer: $key ${plugins_suppress[$key]}"
        suppress_plugin "${plugins_suppress[$key]}"
      done
      #create_commit "Update edit_plugins"
      must_update_codebase=1
    fi
  else
    [ "$DEBUG" = true ] && info "Pas de modification de la liste des plugins"
  fi
  if [ -n "${must_update_codebase:-}" ] && [ "$must_update_codebase" -eq 1 ]; then
    update_codebase
    success Code base updated
  fi
  End
  return "$error"
}

function get_plugins () {
  
  #in: $PROJECT
  #out: $PLUGINS

  Start "$*"
  if [[ -n $(yq '.plugins' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml) ]];
  then
    PLUGINS=$(yq '.plugins| keys |.[]' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  else
    PLUGINS=''
  fi
  [ "$DEBUG" = true ] && info PLUGINS "$PLUGINS"
  End
}

function update_plugins_repo () {

  Start "$*"
  error=0
  [ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ]

  get_plugins

  for PLUGIN in $PLUGINS; do
    [ "$DEBUG" = true ] && info check PLUGIN: "$PLUGIN"
    if [ -d "$DEPOT_MODULES"/"$PLUGIN" ]; then
      get_plugin_desired_state "$PLUGIN"
      repo_need_upgrade "$DEPOT_MODULES"/"$PLUGIN" "$PLUGIN_BRANCH"
      case "$?" in
      0)
        success "$PLUGIN" up to date
      ;;
      1)
        info "Mise à jour automatique du plugin $PLUGIN" from upstream
        git checkout --quiet "$PLUGIN_BRANCH"
        git merge --quiet --ff-only upstream/"$PLUGIN_BRANCH"

        if [ "$LOCALDEV" != null ];
        then
          EXISTS=$(git show-ref refs/heads/"$LOCALDEV")
          if [[ -z $EXISTS ]]; then
            git branch --quiet "$LOCALDEV"
          fi
          git checkout --quiet "$LOCALDEV"
          git rebase --quiet "$PLUGIN_BRANCH"
        fi
      ;;
      2)
        warn warn "$PLUGIN_BRANCH need to push to remote"
      ;;
      3)
        error "$PLUGIN_BRANCH diverged with remote"
        exit 1
      ;;
      4)
        warn "$PLUGIN" dont have remote upstream
      ;;
      esac
    else
      error "$PLUGIN" missing in local cache
      exit 1
    fi
  done

End
return "$error"
}

function get_plugin_params () {
  Start "$*"
  error=0
  PLUGIN="$1"
  [ -d "$DEPOT_MODULES"/"$PLUGIN" ]
  PLUGIN_BRANCH=$(yq .plugins."$PLUGIN".branch "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  PLUGIN_VERSION=$(yq .plugins."$PLUGIN".version "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  LOCALDEV=$(yq .plugins."$PLUGIN".localdev "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml)
  End
}

function get_plugin_desired_state () {
  Start "$*"
  error=0
  [ -d "$DEPOT_MODULES"/"$1" ]
  PLUGIN="$1"
  cd "$DEPOT_MODULES"/"$PLUGIN"
  
  get_plugin_params "$PLUGIN"
  
   # Precedence order
   # 1 PLUGIN_VERSION
   # 2 LOCALDEV
   # 3 BRANCH
   # Values from config file from search_plugin_state or forced by admin

  PLUGIN_DESIRED_STATE=''
  if [[ "$PLUGIN_VERSION" != null ]]; then
    PLUGIN_DESIRED_STATE="$PLUGIN_VERSION"
    [ "$DEBUG" = true ] && info "  PLUGIN_DESIRED_STATE: $PLUGIN_DESIRED_STATE  from PLUGIN_VERSION not null: $PLUGIN_VERSION"
  elif [[ "$LOCALDEV" != 'null' ]]; then
    PLUGIN_DESIRED_STATE="$LOCALDEV"
    [ "$DEBUG" = true ] && info "  PLUGIN_DESIRED_STATE: $PLUGIN_DESIRED_STATE from LOCALDEV not null: $LOCALDEV"
  else
    PLUGIN_DESIRED_STATE="$PLUGIN_BRANCH"
    [ "$DEBUG" = true ] && info "  PLUGIN_DESIRED_STATE: $PLUGIN_DESIRED_STATE from plugin's branch config: $PLUGIN_DESIRED_STATE"
  fi
  [ "$PLUGIN_DESIRED_STATE" = null ]&& { error PLUGIN_DESIRED_STATE de "$PLUGIN" is null ; exit 1; }
  [ "$DEBUG" = true ] && info "  PLUGIN_DESIRED_STATE: $PLUGIN_DESIRED_STATE"
  if [ -d "$DEPOT_MODULES"/"$PLUGIN" ]; then
    cd "$DEPOT_MODULES"/"$PLUGIN"
    if [[ $(git rev-parse --verify "$PLUGIN_DESIRED_STATE") ]];
    then
      git checkout "$PLUGIN_DESIRED_STATE" --quiet
      PLUGIN_DESIRED_STATE_SHA1=$(git rev-parse --short HEAD)
      [ "$DEBUG" = true ] && info "$PLUGIN" desired state sha1: "${PLUGIN_DESIRED_STATE_SHA1:0:7}"
    else
      error=1
      error git rev-parse --verify "$PLUGIN_DESIRED_STATE"
    fi
  fi
  get_plugin_dir "$PLUGIN"
  
  End
}

function install_plugin_project ()  {
  # install plugin (add or update)
  Start "$*"
  [ -d "$DEPOT_MODULES"/"$1" ]
  PLUGIN="$1"
  MSG="$2"
  # get plugin requested state
  get_plugin_desired_state "$PLUGIN"

  cd "$MOODLE_SRC"
  git checkout "$PROJECT_BRANCH" --quiet
  if [ ! -d "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME" ];
  then
    mkdir -p "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME"
  fi
  rsync -a --delete --exclude '.git' "$DEPOT_MODULES"/"$PLUGIN/" "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME/"
  echo "    branch = $PLUGIN_DESIRED_STATE" > "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME"/.gitrepo
  echo "    commit = $PLUGIN_DESIRED_STATE_SHA1" >> "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME"/.gitrepo
  git add .
  git commit -m "$MSG" --quiet
  End
  return "$error"
}

function update_codebase () {

  Start "$*"
  error=0
  # Etape 1 met à jour le depot local de plugin
  #update_plugins_repo "$PROJECT"
  # Etape 2 met à jour config file etat souhaité des plugins
  #  nota: les plugins avec parametre version, ou localdev sont non modifiable
  #        seuls les plugins avec le seul paramtre branch sont mis à jour
  # Etape 3 on compare l'état desiré du plugin à l'état observé : si different mise à jour de la base de code

  get_project_conf
  cd "$MOODLE_SRC"
  git checkout "$PROJECT_BRANCH" --quiet

  get_plugins

  for PLUGIN in $PLUGINS; do
    get_plugin_desired_state "$PLUGIN"

    if [ -d "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME" ];
    then
    # module already installed
      cd "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME"
      #for sha1 complet -c11-50 | cut -c11-50
      #COMMIT=$(grep .gitrepo -e 'commit = ')
      [[ $(grep .gitrepo -e 'commit = ') =~ ^.*commit' = '([a-f0-9].*)$ ]] && COMMIT="${BASH_REMATCH[1]}"
      [ "$DEBUG" = true ] && info commit in plugin: "$COMMIT"
      if [[ "$COMMIT" == "$PLUGIN_DESIRED_STATE_SHA1" ]]; then
        # MOD='OK'
        success "$PLUGIN est installe dans $MOODLE_SRC/$DIR/$COMPONENT_NAME et est à jour OK"
      else
        # MOD='UPD'
        warn "$PLUGIN est installe dans $MOODLE_SRC/$DIR/$COMPONENT_NAME mais n est pas à jour UPD"
        cd  "$MOODLE_SRC"
        install_plugin_project "$PLUGIN" "Mise à jour de $PLUGIN"
        success "$PLUGIN mis à jour dans le répertoire $DIR"
      fi
    else
      # MOD='ADD'
      warn "$PLUGIN missing in $MOODLE_SRC/$DIR/$COMPONENT_NAME. ADD"
      info "$PLUGIN type: $TYPE path: $DIR branch: $PLUGIN_DESIRED_STATE"
      install_plugin_project "$PLUGIN" "Add $PLUGIN / $PLUGIN_DESIRED_STATE in $DIR"
      success "$PLUGIN"/"$PLUGIN_DESIRED_STATE" suscussfully added in "$DIR"
    fi

  done
 must_update_codebase=0
 End
 return "$error"

}

function release () {

Start "$*"
error=0
[ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ]
#get_project_conf
get_moodle_desired_state "$PROJECT"

# $2 MSG for new release

NEWRELEASE="$PROJECT_BRANCH"-$(date +%Y.%m.%d@%Hh%M)
MSG="${1:-$NEWRELEASE}"

info MSG: "$MSG"
cd "$MOODLE_SRC"
[ "$DEBUG" = true ] && info PROJECT_BRANCH: "$PROJECT_BRANCH"
git checkout "$PROJECT_BRANCH" --quiet
git commit --allow-empty -m "$MSG"
git tag -a "$NEWRELEASE" -m ""

# create <PROJECT>.lock
project_lock "$NEWRELEASE"

cd "$MOODLE_SRC"
git checkout "$PROJECT_BRANCH" --quiet
if [ $(git status --porcelain) ];
then
  error update pending dont remote update
else
  if [  -n "${MOODLE_UPDATE_ORIGIN:-}" ];
  then
    [ "$DEBUG" = true ] && info MOODLE_UPDATE_ORIGIN: "$MOODLE_UPDATE_ORIGIN"
    remote_origin_url=$(git config remote.origin.url)
    [ "$DEBUG" = true ] && info remote_origin_url: "$remote_origin_url"
    if [ -n "$remote_origin_url" ]; then
      if [ "$remote_origin_url" == "$MOODLE_UPDATE_ORIGIN" ]; then
        git push origin "$PROJECT_BRANCH"
        success "$MOODLE_UPDATE_ORIGIN" successfully updated
      else
        error remote url has changed : "$remote_origin_url"
        error=1
        exit
      fi
    else
      # first time not configured
      info First time configure git add remote origin "$MOODLE_UPDATE_ORIGIN"
      git remote add origin "$MOODLE_UPDATE_ORIGIN"
      success remote add origin "$MOODLE_UPDATE_ORIGIN"
      # The option -u is for “set upstream”.
      #It configures the local branch to track the remote branch.
      # You dont need to use it more than once.
      git push -u origin "$PROJECT_BRANCH"
      success "$MOODLE_UPDATE_ORIGIN" updated
    fi
  fi
fi

End
return "$error"

}

function project_lock () {

  Start "$*"
  [ -f "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".yml ]
  [ -z "$1" ]&& error param NEWRELEASE missing && exit
  NEWRELEASE="${1}"
  error=0
  cd "$PROJECTS_PATH"/"$PROJECT"
  # create "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".lock
  [ -f "$PROJECT".lock ] && rm "$PROJECT".lock
  cp "$PROJECT".yml "$PROJECT".lock

  [ "$DEBUG" = true ] && info PROJECT_BRANCH: "$PROJECT_BRANCH" Moodle: "$MOODLE_BRANCH"
  cd "$MOODLE_SRC"
  git checkout "$PROJECT_BRANCH" --quiet
  local moodle_branch common_ancestor moodleversion
  moodle_branch="$MOODLE_BRANCH" yq -i '.moodle.branch=strenv(moodle_branch)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".lock
  common_ancestor=$(git merge-base  "$PROJECT_BRANCH" "$MOODLE_BRANCH"  )
  moodleversion="${common_ancestor:0:7}" yq -i '.moodle.version=strenv(moodleversion)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".lock

  get_plugins
  for PLUGIN in $PLUGINS;
  do
    [ "$DEBUG" = true ] &&info "Check plugin: $PLUGIN"
    get_plugin_dir "$PLUGIN"
    [[ $(cat "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME"/.gitrepo | grep 'commit') =~ .*=.([0-9a-z]+) ]] && commit="${BASH_REMATCH[1]}"
    pathenv=".plugins.$PLUGIN" commit=${commit:0:7} yq -i 'eval(strenv(pathenv)).version = strenv(commit)' "$PROJECTS_PATH"/"$PROJECT"/"$PROJECT".lock
  done

  #create_commit "$NEWRELEASE"
  End "$PROJECT"
  return $error
}

function suppress_plugin () {

  Start "$*"
  error=0
  PLUGIN="$1"

  info " Suppression du plugin ${PLUGIN}"

  if menu --title "Boite de dialogue Oui / Non" --yesno "Suppression du plugin ${PLUGIN}" 10 60;
  then
    get_plugin_dir "$PLUGIN"
    cd "$MOODLE_SRC"
    git checkout "$PROJECT_BRANCH" --quiet
    if [ -d "$MOODLE_SRC"/"$DIR"/"$COMPONENT_NAME" ];
    then
      rm -r  "${MOODLE_SRC}"/"${DIR}"/"${COMPONENT_NAME}"
      git add .
      git commit -m "Suppress plugin $PLUGIN" --quiet
      success "$PLUGIN deleted in codebase"
      wait_keyboard
    else
      warn "Plugin $PLUGIN not present nothing to do!"
    fi
  else
   info 'Abandon !'
  fi

End
}